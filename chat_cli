"""Main CLI module."""

import click
import sys
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.prompt import Prompt
from src.client import DeepSeekClient


console = Console()


@click.command()
@click.argument('message', required=False)
@click.option('--interactive', '-i', is_flag=True, help='启动交互模式')
@click.option('--system', '-s', help='系统提示词')
@click.version_option(version='0.1.0')
def cli(message, interactive, system):
    """
    DeepSeek AI 命令行聊天工具
    
    使用示例:
    
    chat-cli "你好，请介绍一下自己"
    
    chat-cli --interactive  # 交互模式
    """
    try:
        client = DeepSeekClient()
    except ValueError as e:
        console.print(f"[red]错误: {e}[/red]")
        console.print("[yellow]请设置 DEEPSEEK_API_KEY 环境变量[/yellow]")
        console.print("请查看 README.md 获取配置说明")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]初始化失败: {e}[/red]")
        sys.exit(1)
    
    if interactive:
        run_interactive_mode(client, system)
    elif message:
        run_single_message(client, message, system)
    else:
        console.print("请提供消息或使用 --interactive 模式")
        console.print("使用 --help 查看帮助信息")


def run_single_message(client: DeepSeekClient, message: str, system_prompt: str = None):
    """运行单次问答模式."""
    try:
        with console.status("[bold green]正在思考中..."):
            response = client.chat(message, system_prompt)
        
        console.print(Panel(
            Text(response, style="white"),
            title="[bold blue]AI 回答[/bold blue]",
            border_style="blue"
        ))
    except Exception as e:
        console.print(f"[red]错误: {e}[/red]")
        sys.exit(1)


def run_interactive_mode(client: DeepSeekClient, system_prompt: str = None):
    """运行交互模式."""
    console.print("[bold green]🤖 欢迎使用 DeepSeek AI 聊天工具![/bold green]")
    console.print("[dim]输入 'quit' 或 'exit' 退出，输入 'clear' 清空对话历史[/dim]")
    console.print()
    
    # Initialize conversation history
    messages = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    else:
        messages.append({"role": "system", "content": "You are a helpful assistant"})
    
    while True:
        try:
            user_input = Prompt.ask("[bold cyan]你[/bold cyan]")
            
            if user_input.lower() in ['quit', 'exit', '退出']:
                console.print("[yellow]再见！[/yellow]")
                break
            
            if user_input.lower() in ['clear', '清空']:
                messages = [messages[0]]  # Keep only system message
                console.print("[yellow]对话历史已清空[/yellow]")
                continue
            
            if not user_input.strip():
                continue
            
            messages.append({"role": "user", "content": user_input})
            
            with console.status("[bold green]正在思考中..."):
                response = client.chat_with_history(messages)
            
            messages.append({"role": "assistant", "content": response})
            
            console.print(Panel(
                Text(response, style="white"),
                title="[bold blue]🤖 AI[/bold blue]",
                border_style="blue"
            ))
            console.print()
            
        except KeyboardInterrupt:
            console.print("\n[yellow]再见！[/yellow]")
            break
        except Exception as e:
            console.print(f"[red]错误: {e}[/red]")
            continue


if __name__ == '__main__':
    cli()
